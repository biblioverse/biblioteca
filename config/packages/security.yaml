security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js|media)/
            security: false
        image_resolver:
          pattern: ^/media/cache/resolve
          security:
            false
        kobo:
          lazy: true
          stateless: true
          pattern: ^/kobo

          access_token:
            token_handler: App\Security\KoboTokenHandler
            token_extractors:
              - App\Security\KoboTokenExtractor
        main:
          lazy: true
          remember_me:
            secret: '%kernel.secret%' # required
            lifetime: 604800 # 1 week in seconds
          provider: app_user_provider
          logout:
            path: app_logout
          form_login:
            # "app_login" is the name of the route created previously
            login_path: app_login

            check_path: app_login
            enable_csrf: true
          # activate different ways to authenticate
          # https://symfony.com/doc/current/security.html#the-firewall

          # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true


    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/logout, roles: ROLE_USER }
        - { path: ^/, roles: ROLE_USER }
        - { path: ^/kobo, roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
