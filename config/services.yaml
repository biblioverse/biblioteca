# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    BOOK_FOLDER_NAMING_FORMAT: '%env(BOOK_FOLDER_NAMING_FORMAT)%'
    BOOK_FILE_NAMING_FORMAT: '%env(BOOK_FILE_NAMING_FORMAT)%'
    KOBO_PROXY_ENABLED: '%env(bool:KOBO_PROXY_ENABLED)%'
    env(KOBO_PROXY_ENABLED): true
    KOBO_PROXY_USE_EVERYWHERE: '%env(bool:KOBO_PROXY_USE_EVERYWHERE)%'
    env(KOBO_PROXY_USE_EVERYWHERE): false
    env(KOBO_API_URL): "https://storeapi.kobo.com"
    KOBO_API_URL:  '%env(KOBO_API_URL)%'
    env(KOBO_IMAGE_API_URL): "https://cdn.kobo.com/book-images"
    KOBO_IMAGE_API_URL:  '%env(KOBO_IMAGE_API_URL)%'
    env(KEPUBIFY_BIN): "/usr/bin/kepubify"
    KEPUBIFY_BIN:  '%env(KEPUBIFY_BIN)%'
    KOBO_READINGSERVICES_URL: '%env(KOBO_READINGSERVICES_URL)%'
    env(KOBO_READINGSERVICES_URL): 'https://readingservices.kobo.com'
    ALLOW_BOOK_RELOCATION: '%env(bool:ALLOW_BOOK_RELOCATION)%'
    env(ALLOW_BOOK_RELOCATION): true

    TYPESENSE_KEY: '%env(TYPESENSE_KEY)%'
    TYPESENSE_URL: '%env(TYPESENSE_URL)%'

    WIKIPEDIA_API_TOKEN: '%env(WIKIPEDIA_API_TOKEN)%'
    env(WIKIPEDIA_API_TOKEN): null

    GENERIC_SYSTEM_PROMPT: '%env(GENERIC_SYSTEM_PROMPT)%'
    env(GENERIC_SYSTEM_PROMPT): "As a highly skilled and experienced librarian AI model, I'm here to help you tag and summarize books as close to the original as possible. I will never make up any information. I will only use the information you provide me. I will communicate with you primarily using your preferred language."

    AI_SUMMARY_PROMPT: '%env(AI_SUMMARY_PROMPT)%'
    env(AI_SUMMARY_PROMPT): "Can you make a factual summary of the book {book} in around 150 words in french"

    AI_TAG_PROMPT: '%env(AI_TAG_PROMPT)%'
    env(AI_TAG_PROMPT): "I want to tag a book. Can you cite the genres and tags for the following book: {book}?"

    DATABASE_URL: '%env(DATABASE_URL)%'


services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    gedmo.mapping.driver.attribute:
        class: Gedmo\Mapping\Driver\AttributeReader

    gedmo.listener.tree:
        class: Gedmo\Tree\TreeListener
        tags:
            - { name: doctrine.event_listener, event: 'prePersist'}
            - { name: doctrine.event_listener, event: 'preUpdate'}
            - { name: doctrine.event_listener, event: 'preRemove'}
            - { name: doctrine.event_listener, event: 'onFlush'}
            - { name: doctrine.event_listener, event: 'loadClassMetadata'}
            - { name: doctrine.event_listener, event: 'postPersist'}
            - { name: doctrine.event_listener, event: 'postUpdate'}
            - { name: doctrine.event_listener, event: 'postRemove'}
        calls:
            - [ setAnnotationReader, [ "@gedmo.mapping.driver.attribute" ] ]

    gedmo.listener.timestampable:
        class: Gedmo\Timestampable\TimestampableListener
        tags:
            - { name: doctrine.event_listener, event: 'prePersist' }
            - { name: doctrine.event_listener, event: 'onFlush' }
            - { name: doctrine.event_listener, event: 'loadClassMetadata' }
        calls:
            - [ setAnnotationReader, [ "@gedmo.mapping.driver.attribute" ] ]
            - [ setClock, ['@Psr\Clock\ClockInterface'] ]

    gedmo.listener.sluggable:
        class: Gedmo\Sluggable\SluggableListener
        tags:
            - { name: doctrine.event_listener, event: 'prePersist' }
            - { name: doctrine.event_listener, event: 'onFlush' }
            - { name: doctrine.event_listener, event: 'loadClassMetadata' }
        calls:
            - [ setAnnotationReader, [ "@gedmo.mapping.driver.attribute" ] ]

    app.menu_builder:
        class: App\Menu\MenuBuilder
        arguments: ["@knp_menu.factory"]
        tags:
            - { name: knp_menu.menu_builder, method: createMainMenu, alias: main } # The alias is what is used to retrieve the menu

    App\Service\Search\SearchHelper:
        arguments:
            $bookFinder: '@typesense.finder.books'

    App\Service\BookFileSystemManager:
        bind:
            '$publicDir': '%kernel.project_dir%/public'
            '$bookFolderNamingFormat': '%BOOK_FOLDER_NAMING_FORMAT%'
            '$bookFileNamingFormat': '%BOOK_FILE_NAMING_FORMAT%'

    App\Service\BookFileSystemManagerInterface: '@App\Service\BookFileSystemManager'

    App\Kobo\ParamConverter\SyncTokenParamConverter:
      tags:
        - { name: request.param_converter, priority: 100 }

    App\Kobo\Proxy\KoboProxyConfiguration:
      calls:
        - [ setStoreApiUrl, ['%KOBO_API_URL%'] ]
        - [ setReadingServiceUrl, ['%KOBO_READINGSERVICES_URL%'] ]
        - [ setImageApiUrl, ['%KOBO_IMAGE_API_URL%'] ]
        - [ setEnabled, ['%KOBO_PROXY_ENABLED%'] ]
        - [ setUseProxyEverywhere, ['%KOBO_PROXY_USE_EVERYWHERE%'] ]

    App\Kobo\Proxy\KoboProxyListener:
      tags:
        - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest, priority: 130 }

    App\EventListener\LanguageListener:
        tags:
        - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest, priority: 101 }

    App\Kobo\LogProcessor\KoboContextProcessor:
        tags:
            - { name: monolog.processor }

    App\Security\KoboAccessTokenAuthenticator:
        bind:
            $accessTokenExtractor: '@App\Security\KoboTokenExtractor'
            $accessTokenHandler: '@App\Security\KoboTokenHandler'

    App\Form\LabelTranslationFormExtension:
        autoconfigure: true

when@dev:
    services:
        Symfony\Component\HttpKernel\Profiler\Profiler: '@profiler'

when@test:
    services:
        App\Tests\FileSystemManagerForTests:
            autowire: true
            bind:
                $publicDirectory: '%kernel.project_dir%/tests/Resources'
        App\Service\BookFileSystemManagerInterface:
            alias: 'App\Tests\FileSystemManagerForTests'

        App\Tests\TestClock:
            public: true

        Psr\Clock\ClockInterface: '@App\Tests\TestClock'

        App\Tests\Mock\AbstractApiMock: ~

        App\Ai\Communicator\OllamaCommunicator:
            autoconfigure: true
            arguments:
                $client: '@App\Tests\Mock\AbstractApiMock'

        App\Ai\Communicator\OpenAiCommunicator:
            autoconfigure: true
            arguments:
                $client: '@App\Tests\Mock\AbstractApiMock'

